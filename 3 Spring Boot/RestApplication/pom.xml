<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>RestApplication</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--The Spring Boot starter parent. Controls <dependencies> below.
        We use Spring Boot's starter dependencies. The starters bundle or chunk dependencies into groups
        that work well together. You can include individual dependencies if you need more control, but the starters
        are a good place to, well, start.   -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath />
    </parent>

    <dependencies>
        <!--Spring Boot starter children. No versions needed.-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <!--The spring-boot-devtools aren't strictly necessary. They make development easier by reloading or
                restarting your app when you make code changes without requiring a manual rebuild and deploy. They also
                disable some caching behavior so changes to static resources and templates (more on those later) are seen
                immediately.   -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <!-- Build! With your dependencies in place, build your project so Maven can fetch missing
         packages and reference packages in your .m2 directory.-->

</project>